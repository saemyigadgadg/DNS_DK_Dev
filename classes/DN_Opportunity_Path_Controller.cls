/**
* @Class : DN_Opportunity_Path_Controller
*
* @Author : SeJin, Kwon
* @Date : 2024. 10. 21.
* @Version : 1.0
* @Modified : 
*  ----------------------------------------------
*  NO | Date       | Modifier       | Description 
*  ---------------------------------------------- 
*  1. | 2024-10-21 | SeJin, Kwon   | 최초작성
*
*/
public with sharing class DN_Opportunity_Path_Controller {

    @AuraEnabled
    public static string getStage(String recordId){

        Opportunity oppty = [SELECT Id, StageName FROM Opportunity WHERE Id =: recordId];
        try {
            return oppty.StageName;
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }

    @AuraEnabled
    public static Integer AbortClosed(String recordId){
        try {
            Date today = Date.today();
            Opportunity oppty = [SELECT Id, CreatedDate,RecordType.DeveloperName FROM Opportunity WHERE Id =: recordId];
            Integer duration = oppty.CreatedDate.date().daysBetween(today);
            if(oppty.RecordType.DeveloperName == 'General' || oppty.RecordType.DeveloperName == 'Turn_Key'){
                //DNSA가 아닌것 중에만 숫자 그대로
                return duration;
            }else{
                //아니면 숫자 100
                return 100;
            }

        } catch (Exception e) {
            System.debug('Line : ' + e.getLineNumber() + 'MSG : ' + e.getMessage());
            throw new AuraHandledException(e.getMessage());
        }
    }

    @AuraEnabled
    public static string updateStage(Opportunity closedUpdate){

        // Opportunity oppty = [SELECT Id, StageName FROM Opportunity WHERE Id =: recordId];
        try {
            // Opportunity updateOpp = new Opportunity(Id = recordId, StageName = stageName );
            String ReasonPriceAPI  = getApiNameFromLabel(Schema.Opportunity.Reason_Price__c, closedUpdate.Reason_Price__c);
            String ReasonSalesAPI  = getApiNameFromLabel(Schema.Opportunity.Reason_Sales__c, closedUpdate.Reason_Sales__c);
            String ReasonServiceAPI  = getApiNameFromLabel(Schema.Opportunity.Reason_Service__c, closedUpdate.Reason_Service__c);
            String ReasonMisAPI  = getApiNameFromLabel(Schema.Opportunity.Reason_Mis__c, closedUpdate.Reason_Mis__c);
            String ReasonCustomerAPI  = getApiNameFromLabel(Schema.Opportunity.Reason_Customer__c, closedUpdate.Reason_Customer__c);
            String ReasonDeliveryAPI = getApiNameFromLabel(Schema.Opportunity.Reason_Delivery__c, closedUpdate.Reason_Delivery__c);
            String ReasonPrdAPI = getApiNameFromLabel(Schema.Opportunity.Reason_Prd__c, closedUpdate.Reason_Prd__c);

            System.debug('Reason_Delivery__c_API : ' + ReasonDeliveryAPI);
            System.debug('ReasonPrdAPI : ' + ReasonPrdAPI);
            closedUpdate.Reason_Price__c = ReasonPriceAPI;
            closedUpdate.Reason_Sales__c = ReasonSalesAPI;
            closedUpdate.Reason_Service__c = ReasonServiceAPI;
            closedUpdate.Reason_Mis__c = ReasonMisAPI;
            closedUpdate.Reason_Customer__c = ReasonCustomerAPI;
            closedUpdate.Reason_Delivery__c = ReasonDeliveryAPI;
            closedUpdate.Reason_Prd__c = ReasonPrdAPI;
            update closedUpdate;
            return 'SUCCESS';
        } catch (Exception e) {
            System.debug('Line : ' + e.getLineNumber() + 'msg : ' + e.getMessage());
            throw new AuraHandledException(e.getMessage());
        }
    }

    @AuraEnabled
    public static Map<String, List<string>> getPicklistValues(String stageName){
        Map<String, List<String>> picklistValues = new Map<String, List<String>>();

        List<String> picklistPrd = new List<String>();
        List<String> picklistPrice = new List<String>();
        List<String> picklistDiv = new List<String>();
        List<String> picklistSales = new List<String>();
        List<String> picklistService = new List<String>();
        List<String> picklistMis = new List<String>();
        List<String> picklistCustomer = new List<String>();

        try {
            Schema.DescribeFieldResult fieldResult = Opportunity.Reason_Prd__c.getDescribe();
            System.debug('stageName : ' + stageName);
            
            List<String> valuesPrd = DN_Opportunity_Path_Controller.getDependentPicklistValues(Opportunity.Reason_Prd__c).get(stageName);
            List<String> valuesPrice = DN_Opportunity_Path_Controller.getDependentPicklistValues(Opportunity.Reason_Price__c).get(stageName);
            List<String> valuesDiv = DN_Opportunity_Path_Controller.getDependentPicklistValues(Opportunity.Reason_Delivery__c).get(stageName);
            List<String> valuesSales = DN_Opportunity_Path_Controller.getDependentPicklistValues(Opportunity.Reason_Sales__c).get(stageName);
            List<String> valuesService = DN_Opportunity_Path_Controller.getDependentPicklistValues(Opportunity.Reason_Service__c).get(stageName);
            List<String> valuesMis = DN_Opportunity_Path_Controller.getDependentPicklistValues(Opportunity.Reason_Mis__c).get(stageName);
            List<String> valuesCustomer = DN_Opportunity_Path_Controller.getDependentPicklistValues(Opportunity.Reason_Customer__c).get(stageName);

            //제품 사유
            for (String entry : valuesPrd) 
            {
                picklistPrd.add(entry);
            }
            picklistValues.put('ReasonPrd', picklistPrd);

            for (String entry : valuesPrice) 
            {
                picklistPrice.add(entry);
            }
            picklistValues.put('ReasonPrice', picklistPrice);

            for (String entry : valuesDiv) 
            {
                picklistDiv.add(entry);
            }
            picklistValues.put('ReasonDiv', picklistDiv);

            for (String entry : valuesSales) 
            {
                picklistSales.add(entry);
            }
            picklistValues.put('ReasonSales', picklistSales);

            for (String entry : valuesService) 
            {
                picklistService.add(entry);
            }
            picklistValues.put('ReasonService', picklistService);

            for (String entry : valuesMis) 
            {
                picklistMis.add(entry);
            }
            picklistValues.put('ReasonMis', picklistMis);
            
            for (String entry : valuesCustomer) 
            {
                picklistCustomer.add(entry);
            }
            picklistValues.put('ReasonCustomer', picklistCustomer);

        } catch (Exception e) {
            System.debug('Error: ' + e.getMessage());
        }

        return picklistValues;
    }

    public static Map<String, List<String>> getDependentPicklistValues(Schema.sObjectField dependToken) {
        Schema.DescribeFieldResult depend = dependToken.getDescribe();
        Schema.sObjectField controlToken = depend.getController();
        if (controlToken == null) {
            return new Map<String, List<String>>();
        }
     
        Schema.DescribeFieldResult control = controlToken.getDescribe();
        List<Schema.PicklistEntry> controlEntries;
        if(control.getType() != Schema.DisplayType.Boolean) {
            controlEntries = control.getPicklistValues();
        }
     
        String base64map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        Map<String,List<String>> dependentPicklistValues = new Map<String,List<String>>();
        for (Schema.PicklistEntry entry : depend.getPicklistValues()) {
            if (entry.isActive() && String.isNotEmpty(String.valueOf(((Map<String,Object>) JSON.deserializeUntyped(JSON.serialize(entry))).get('validFor')))) {
                List<String> base64chars = String.valueOf(((Map<String,Object>) JSON.deserializeUntyped(JSON.serialize(entry))).get('validFor')).split('');
                for (Integer index = 0; index < (controlEntries != null ? controlEntries.size() : 2); index++) {
                    Object controlValue =
                            (controlEntries == null
                                    ?   (Object) (index == 1)
                                    :   (Object) (controlEntries[index].isActive() ? controlEntries[index].getValue() : null)
                            );
                    Integer bitIndex = index / 6;
                    if (bitIndex > base64chars.size() - 1) {
                        break;
                    }
                    Integer bitShift = 5 - Math.mod(index, 6);

                    // base64map.indexOf( base64chars[ bitIndex ] ) &
                    if  (controlValue == null || (base64map.indexOf( base64chars[ bitIndex ] ) & (1 << bitShift)) == 0)
                        continue;
                    if (!dependentPicklistValues.containsKey((String) controlValue)) {
                        dependentPicklistValues.put((String) controlValue, new List<String>());
                    }
                    dependentPicklistValues.get((String) controlValue).add(entry.getLabel());
                }
            }
        }
        return dependentPicklistValues;
    }

    public static String getApiNameFromLabel(Schema.sObjectField picklistField, String label) {
        // 선택 목록 필드 설명 가져오기
        Schema.DescribeFieldResult fieldDescribe = picklistField.getDescribe();
        
        // 선택 목록 값 조회
        for (Schema.PicklistEntry entry : fieldDescribe.getPicklistValues()) {
            if (entry.getLabel() == label) { // 입력한 Label과 동일한 값 찾기
                return entry.getValue(); // API Name 반환
            }
        }
        return ''; // 해당 Label이 없으면 null 반환
    }
    public static void dummy() {
        Integer i = 0;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        //         i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
    }
}