/**
 * @description       : 
 * @author            : Hanyeong Choi
 * @last modified on  : 05-15-2025
 * @last modified by  : Hanyeong Choi
**/
public with sharing class QuoteLineItemTriggerHandler extends TriggerHandler {
    private static final Id   recordTypeIdKorea  = SObjectType.Quote.getRecordTypeInfosByDeveloperName().get('Korea').getRecordTypeId();
    private static final Id   recordTypeIdCommo = SObjectType.Quote.getRecordTypeInfosByDeveloperName().get('DNSA_Commodity').getRecordTypeId();
    private static final Id   recordTypeIdFactory  = SObjectType.Quote.getRecordTypeInfosByDeveloperName().get('DNSA_Factory').getRecordTypeId();
    private static final Id   recordTypeIdService = SObjectType.Quote.getRecordTypeInfosByDeveloperName().get('Service').getRecordTypeId();
    private static User currentUser;
    public QuoteLineItemTriggerHandler() {
        if(currentUser == null) currentUser = getCurrentUser();
	}
    

    public override void onBeforeInsert(List<sObject> news){
        if(isExecuting){
            List<QuoteLineItem> qtliList = (List<QuoteLineItem>)news;
            List<Quote> getrecordName = [SELECT isCloned__c, RequestedShipDate__c, MachinePartsWarranty__c, RecordTypeId, ExpectedDelivDate__c, Opportunity.RecordTypeId, RecordType.Name, Account.CountryLookup__r.Name, Account.CountryLookup__r.CountryCode__c, OpportunityId FROM Quote WHERE Id =: qtliList[0].QuoteId];
            Map<Id, OpportunityLineItem> optyLIMap = new Map<Id, OpportunityLineItem>();
            for(OpportunityLineItem oli : [SELECT Id, Product2Id, OptyProdCurrency__c, SupplyProduct__c, AvailableStock__c, Unit__c, CSTotalPrice__c, ListPrice__c
                                           FROM OpportunityLineItem 
                                           WHERE OpportunityId =: getrecordName[0].OpportunityId]) {
                optyLIMap.put(oli.Product2Id, oli);
            }         
            
            List<Warranty__c> globalWar = [SELECT Id, KSCHL__c, VKORG__c, SPART__c, VTWEG__c, ZZPR_WAR__c, Percent__c, DATBI__c, DATAB__c, ZZWARRPER__c, ZZPERUNIT__c, ZZWARHRS__c, ZZCOVERAGE__c, ZZCOVERAGE_B__c FROM Warranty__c WHERE VTWEG__c = '20'];
            Map<String, Warranty__c> globalWarMap = new Map<String, Warranty__c>();
            for(Warranty__c glo : globalWar){
                globalWarMap.put(glo.ZZPR_WAR__c, glo);
            }
            List<Warranty__c> dnsaWar = [SELECT Id, KSCHL__c, VKORG__c, SPART__c, VTWEG__c, ZZPR_WAR__c, Percent__c, DATBI__c, DATAB__c, ZZWARRPER__c, ZZPERUNIT__c, ZZWARHRS__c, ZZCOVERAGE__c, ZZCOVERAGE_B__c FROM Warranty__c WHERE BZIRK__c = 'M3UL'];
            Map<String, Warranty__c> dnsaWarMap = new Map<String, Warranty__c>();
            for(Warranty__c glo : dnsaWar){
                dnsaWarMap.put(glo.ZZPR_WAR__c, glo);
            }

            // 2025.03.31 suheon.ha
            Map<Id, List<OpportunityLineItem>> opptyMap = new Map<Id, List<OpportunityLineItem>>();
            for (OpportunityLineItem oli : [SELECT Id, Product2Id, OptyProdCurrency__c, SupplyProduct__c, AvailableStock__c, Unit__c, CSTotalPrice__c, ListPrice__c, ProductName__c
                                            FROM OpportunityLineItem 
                                            WHERE OpportunityId =: getrecordName[0].OpportunityId]) {
                if (!opptyMap.containsKey(oli.Product2Id)) {
                    opptyMap.put(oli.Product2Id, new List<OpportunityLineItem>());
                }
                opptyMap.get(oli.Product2Id).add(oli);
            }
            Map<Id, Integer> qtliIndexMap = new Map<Id, Integer>();
            for (QuoteLineItem qtli : qtliList) {
        
                // 2025.03.04 suheon.ha
                if (getrecordName[0].RecordTypeId == recordTypeIdService) {
                    List<OpportunityLineItem> optyLIList = opptyMap.get(qtli.Product2Id);
                    if (optyLIList != null && !optyLIList.isEmpty()) {
                        Integer currentIndex = qtliIndexMap.containsKey(qtli.Product2Id) ? qtliIndexMap.get(qtli.Product2Id) : 0;
                        
                        if (currentIndex < optyLIList.size()) {
                            OpportunityLineItem optyLI = optyLIList[currentIndex];
        
                            qtli.SupplyProduct__c = optyLI.SupplyProduct__c;
                            qtli.ProductName__c = optyLI.ProductName__c;
                            qtli.QuoteProdCurrency__c = optyLI.OptyProdCurrency__c;
                            qtli.AvailableStock__c = optyLI.AvailableStock__c;
                            qtli.Unit__c = optyLI.Unit__c;
                            qtli.ListPrice__c = optyLI.ListPrice__c;
                            qtli.CSTotalPrice__c = optyLI.CSTotalPrice__c;
        
                            qtliIndexMap.put(qtli.Product2Id, currentIndex + 1);
                        }
                        System.debug('qtliIndexMap : ' + qtliIndexMap);
                        
                    }
                }
            }

            System.debug('qtliList : ' + qtliList);
            System.debug('getrecordName : ' + getrecordName);
            if(!getrecordName[0].isCloned__c){
                for(QuoteLineItem qtli : qtliList){
                    if(getrecordName[0].RecordTypeId == recordTypeIdKorea){
                        qtli.ExpectedDelivDate__c = getrecordName[0].ExpectedDelivDate__c;
                    }
                    System.debug('test01 qtli1 ::: ' + qtli);
                    qtli.Quote_RecordType__c = getrecordName[0].RecordType.Name;
                    if(getrecordName[0].RecordTypeId == recordTypeIdFactory){
                        // qtli.Warranty__c = getrecordName[0].MachinePartsWarranty__c != null ? getrecordName[0].MachinePartsWarranty__c : 'M12';
                        qtli.Warranty__c = 'M24';
                        qtli.Warranty_Percent__c = dnsaWarMap.get('M24').Percent__c;

                    }  else if(getrecordName[0].RecordTypeId == recordTypeIdCommo) {
                        // qtli.Warranty__c = 'X24';
                    } else if(getrecordName[0].Account.CountryLookup__r.CountryCode__c == 'KR'){//국가가 한국이면 Warranty 12개월 Default
                        qtli.Warranty__c = 'B1D';
                    }
                    else if(getrecordName[0].Account.CountryLookup__r.CountryCode__c == 'GB' || getrecordName[0].Account.CountryLookup__r.CountryCode__c == 'IT'){//영국, 이탈리아는 24개월
                        qtli.Warranty__c = 'B24';
                        qtli.Warranty_Percent__c = globalWarMap.get('B24').Percent__c;

                    }else{ //나머지는 12개월
                        qtli.Warranty__c = 'B12';
                        qtli.Warranty_Percent__c = globalWarMap.get('B12').Percent__c;

                    }
                    qtli.Requested_Ship_Date__c = getrecordName[0].RequestedShipDate__c;

                    System.debug('test01 qtli ::: ' + qtli);
                }
            }
        }
    }

    public override void onAfterInsert(List<sObject> news, Map<Id, sObject> newMap){
        if(isExecuting) {
            System.debug('QuoteLineItem AFTER_INSERT TRIGGER Start');
            List<QuoteLineItem> qliList = (List<QuoteLineItem>) news;
            List<QuoteLineItem> qlis = new List<QuoteLineItem>();
            Set<Id> qliIds = new Set<Id>();

            if(qliList[0].Quote_RecordType__c == 'DNSA Factory') {
                // insertSqrQliJunction(qliList[0], qliList[0].Id);
            }

            List<OpportunityLineItem> itemList = (List<OpportunityLineItem>) news;
            //[GSR SR0000010031094] 제품 등록 시 CRM 알람 추가
            // String alertName        = 'Create Opportunity Line Item Alert';
            // String alertType        = 'Notification';
            // String userId           = UserInfo.getUserId();
            // String alertLanguage    = 'ko';
            // String objName          = itemList[0].Opportunity.Name;
            // String objId            = itemList[0].OpportunityId;

            // DN_FinalQuoteCheckController.sendCrmEmailAlert(alertType,alertName,alertLanguage,userId,objName,objId);

            setting(false, TriggerOperation.AFTER_INSERT);
            System.debug('QuoteLineItem AFTER_INSERT TRIGGER End');
        }
    }

    public override void onBeforeUpdate(List<sObject> olds, List<sObject> news, Map<Id, sObject> oldMap, Map<Id, sObject> newMap){
        if(isExecuting) {
            System.debug('QuoteLineItem BEFORE_UPDATE TRIGGER Start');
            List<QuoteLineItem> qliList = (List<QuoteLineItem>) news;
            // System.debug('qliList[0].Quote.RecordTypeId::' + qliList.Quote_RecordType__c);
            if(qliList[0].Quote_RecordType__c != 'Service') {
                System.debug('flag5::');
                if(qliList[0].Quantity != 1){
                    qliList[0].addError(System.Label.DN_M_CantQtyChange); //The quantity cannot be changed./ 수량은 변경이 불가능합니다.
                }
            }
            System.debug('QuoteLineItem BEFORE_UPDATE TRIGGER End');
        } 
    }

    public override void onAfterUpdate(List<sObject> olds, List<sObject> news, Map<Id, sObject> oldMap, Map<Id, sObject> newMap) {
        if(isExecuting) {
            System.debug('QuoteLineItem AFTER_UPDATE TRIGGER Start');
            List<QuoteLineItem> qliList = (List<QuoteLineItem>) news;
            List<QuoteLineItem> cancelQliList = new List<QuoteLineItem>();
            List<QuoteLineItem> cancelNotiList = new List<QuoteLineItem>();
            Set<Id> warningIds = new Set<Id>();
            Set<Id> deleteIds = new Set<Id>();
            Map<String, Date> dateMap = new Map<String, Date>();

            if(qliList[0].Quote_RecordType__c == 'DNSA Factory'){
                Quote totalUp = new Quote();
                totalUp.Id = qliList[0].QuoteId;
                totalUp.TotalPrice__c = qliList[0].Dealer_Price__c + qliList[0].US_Option_Total__c;
                update totalUp;
            }
            
            for(QuoteLineItem qli : qliList) {
                if(qli.Quote_RecordType__c == 'DNSA Factory' || qli.Quote_RecordType__c == 'DNSA Commodity' || System.Test.isRunningTest()) {
                    if(oldMap.get(qli.Id).get('Requested_Ship_Date__c') != qli.Requested_Ship_Date__c) {
                        dateMap.put(qli.QuoteId, qli.Requested_Ship_Date__c);
                    }
                }
            }

            if(!dateMap.isEmpty()) {
                List<Quote> quoteList = [SELECT Id, RequestedShipDate__c FROM Quote WHERE Id IN :dateMap.keySet()];
                if(!quoteList.isEmpty()) {
                    List<Quote> quoteUpdateList = new List<Quote>();
                    for(Quote quote : quoteList) {
                        quote.RequestedShipDate__c = dateMap.get(quote.Id);
                        quoteUpdateList.add(quote);
                    }
                    if(!quoteUpdateList.isEmpty()) update quoteUpdateList;
                }
            }

            setting(false, TriggerOperation.AFTER_UPDATE);
            System.debug('QuoteLineItem AFTER_UPDATE TRIGGER End');
        }
    }

    public override void onAfterDelete(List<sObject> dels, Map<Id, sObject> delMap) {
        if(isExecuting) {
            System.debug('QuoteLineItem AFTER_DELETE TRIGGER Start');
            List<QuoteLineItem> qliList = (List<QuoteLineItem>) dels;
            Set<Id> qliIds = new Set<Id>();
            Set<Id> quoteIds = new Set<Id>();
            Set<Id> sqrIds = new Set<Id>();

            for(QuoteLineItem qli : qliList) {
                qliIds.add(qli.Id);
                quoteIds.add(qli.QuoteId);
            }

            if(!qliIds.isEmpty() && !quoteIds.isEmpty()) {
                List<SQ_Registration_Junction__c> SQR_Qli_Juncs = [SELECT Id, SQRegistration__c FROM SQ_Registration_Junction__c WHERE QuoteLineItem__c  IN :qliIds];
                List<SQ_QuoteLineitem_Junction__c > SQ_Qli_Juncs = [SELECT Id FROM SQ_QuoteLineitem_Junction__c  WHERE QuoteLineItem__c = :qliIds];

                List<SQregistration_Quote__c> sqRegQuoteList = [
                    SELECT Id, SQ_Registration__c, Quote__c
                    FROM SQregistration_Quote__c
                    WHERE Quote__c IN :quoteIds
                ];

                if (!sqRegQuoteList.isEmpty()) {
                    Set<Id> sqRegistrationIds = new Set<Id>();
                    for (SQregistration_Quote__c sqrQ : sqRegQuoteList) {
                        sqRegistrationIds.add(sqrQ.SQ_Registration__c);
                    }

                    List<SQ_Registration_Junction__c> junctionList = [
                        SELECT SQRegistration__c, QuoteLineItem__c
                        FROM SQ_Registration_Junction__c
                        WHERE SQRegistration__c IN :sqRegistrationIds
                    ];

                    Map<Id, Set<Id>> regIdToQliSet = new Map<Id, Set<Id>>();
                    for (SQ_Registration_Junction__c junction : junctionList) {
                        if (!regIdToQliSet.containsKey(junction.SQRegistration__c)) {
                            regIdToQliSet.put(junction.SQRegistration__c, new Set<Id>());
                        }
                        regIdToQliSet.get(junction.SQRegistration__c).add(junction.QuoteLineItem__c);
                    }

                    List<SQregistration_Quote__c> deletableList = new List<SQregistration_Quote__c>();
                    for (SQregistration_Quote__c sqrQ : sqRegQuoteList) {
                        Set<Id> relatedQliIds = regIdToQliSet.get(sqrQ.SQ_Registration__c);
                        if (relatedQliIds != null && relatedQliIds.size() == 1 && relatedQliIds.contains(qliList[0].Id)) {
                            deletableList.add(sqrQ);
                        }
                    }

                    if (!deletableList.isEmpty()) {
                        delete deletableList;
                        System.debug('삭제된 SQregistration_Quote__c 레코드 수: ' + deletableList.size());
                    } else {
                        System.debug('삭제할 수 있는 SQregistration_Quote__c 레코드가 없습니다.');
                    }

                } else {
                    System.debug('삭제할 SQregistration_Quote__c 레코드가 없습니다.');
                }

                // List<SQregistration_Quote__c> SQR_Quote_Juncs = [SELECT Id FROM SQregistration_Quote__c WHERE Quote__c = :quoteIds];
                // if(!SQR_Quote_Juncs.isEmpty()) delete SQR_Quote_Juncs;

                if(!SQ_Qli_Juncs.isEmpty()) delete SQ_Qli_Juncs;
                if(!SQR_Qli_Juncs.isEmpty()) {
                    for(SQ_Registration_Junction__c junc : SQR_Qli_Juncs) { 
                        sqrIds.add(junc.SQRegistration__c);
                    }
                    delete SQR_Qli_Juncs;

                    List<SQ_Registration_Junction__c> SQRQliJuncs = [SELECT Id FROM SQ_Registration_Junction__c WHERE SQRegistration__c IN :sqrIds];
                    if(SQRQliJuncs.isEmpty()) {
                        List<SQRegistration__c> sqrList = [SELECT Id, Stage__c FROM SQRegistration__c WHERE Id IN :sqrIds];
                        if(!sqrList.isEmpty()) {
                            List<SQRegistration__c> sqrUpdateList = new List<SQRegistration__c>();
                            for(SQRegistration__c sqr : sqrList) {
                                sqr.Stage__c = 'Drop';
                                sqrUpdateList.add(sqr);
                            }
                            if(!sqrUpdateList.isEmpty()) update sqrUpdateList;
                        }
                    }

                }
            }

            setting(false, TriggerOperation.AFTER_DELETE);
            System.debug('QuoteLineItem AFTER_DELETE TRIGGER End');
        }
    }

    private static void insertSqrQliJunction(QuoteLineItem qlis, Id qliIds) {
        List<SQ_Registration_Junction__c> sqrjs = [SELECT Id FROM SQ_Registration_Junction__c WHERE QuoteLineItem__c = :qliIds];
        if(sqrjs.isEmpty()) {
            List<SQRegistration__c> sqrList = [SELECT Id, Quote__c FROM SQRegistration__c WHERE Quote__c = :qlis.QuoteId];
            if(!sqrList.isEmpty()) {
                System.debug('sqrList ::: ' + sqrList);
                List<SQ_Registration_Junction__c> insertList = new List<SQ_Registration_Junction__c>();
                for(SQRegistration__c sqr : sqrList) {
                    SQ_Registration_Junction__c junction = new SQ_Registration_Junction__c();
                    junction.QuoteLineItem__c = qlis.Id;
                    junction.SQRegistration__c = sqr.Id;
                    insertList.add(junction);
                }
                System.debug('insertList ::: ' + insertList);
                if(!insertList.isEmpty()) insert insertList;
            }
        }
        return;
    }

    private static User getCurrentUser() {
        User user = [
            SELECT  Id
                    , SalesOrganization__c
                    , SalesOffice__c
                    , SalesDistrict__c
                    , DistributionChannel__c
                    , Division__c
                    , AccountId
                    , Account.CustomerCode__c
                    , Account.SalesOrganization__c
                    , Account.SalesOffice__c
                    , Account.DistributionChannel__c
                    , Account.Division__c
                    , Account.SalesDistrict__c
            FROM User
            WHERE Id = :UserInfo.getUserId()
            LIMIT 1
        ];
        return user;
    }
    public static void dummy() {
        // Integer i = 0;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        //         i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
        // i++;
    }
}